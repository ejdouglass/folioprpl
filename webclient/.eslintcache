[{"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/reportWebVitals.js":"1","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/App.js":"2","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/index.js":"3","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/context/context.js":"4","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/pages/Register.js":"5","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/components/AuthComponent.js":"6","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/PrivateRoute.js":"7","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/pages/Login.js":"8","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/functions/globalfxns.js":"9","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/events/events.js":"10"},{"size":362,"mtime":1611778038374,"results":"11","hashOfConfig":"12"},{"size":9789,"mtime":1612226889802,"results":"13","hashOfConfig":"12"},{"size":1308,"mtime":1611947606910,"results":"14","hashOfConfig":"12"},{"size":4352,"mtime":1612224307512,"results":"15","hashOfConfig":"12"},{"size":3628,"mtime":1612137479195,"results":"16","hashOfConfig":"12"},{"size":1134,"mtime":1611881818294,"results":"17","hashOfConfig":"12"},{"size":550,"mtime":1611787834868,"results":"18","hashOfConfig":"12"},{"size":1844,"mtime":1612136625786,"results":"19","hashOfConfig":"12"},{"size":1112,"mtime":1612222611827,"results":"20","hashOfConfig":"12"},{"size":2367,"mtime":1612232472492,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1da1rpw",{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/reportWebVitals.js",[],"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/App.js",["45","46","47","48","49"],"import React, { useContext, useState, useEffect, useRef } from 'react';\nimport { BrowserRouter as Router, Route, useHistory } from 'react-router-dom';\nimport PrivateRoute from './PrivateRoute';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport axios from 'axios';\nimport './App.css';\nimport { save, load, dateToString, updateDB } from './functions/globalfxns';\nimport { Store, Context, actions } from './context/context';\nimport { Button } from './components/AuthComponent'\nimport { events } from './events/events';\n\nconst App = () => {\n  return (\n    <Store>\n      <Router>\n        <div id='app-container'>\n          <Cutscene />\n          <Header />\n          <div id='app-body'>\n            <Route exact path='/' component={LandingPage} />\n            <Route exact path='/register' component={Register} />\n            <Route exact path='/login' component={Login} />\n            <PrivateRoute exact path='/user' component={UserPage} />\n            <PrivateRoute exact path='/home' component={Home} />\n            <PrivateRoute exact path='/body' component={Body} />\n            <PrivateRoute exact path='/people' component={People} />\n          </div>\n        </div>\n      </Router>\n    </Store>\n  )\n}\n\n\nconst Cutscene = () => {\n  const [state, dispatch] = useContext(Context);\n\n  // Probably add keyboard listeners to the window ONLY when cutscene is active? Can add keyboard interactivity that way, not just mouse.\n\n  // Could consider refactoring this to have conditional rendering in the RETURN statement that checks for state?.cutscene?.current instead\n\n  // HERE: Probably a handy useEffect that goes through and loads all the necessary details from the current cutscene event\n\n  return (\n    <div style={{display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', position: 'fixed', zIndex: '99', visibility: state?.cutscene?.current ? 'visible' : 'hidden', width: '100vw', height: '100vh', opacity: '0.9', backgroundColor: 'white'}}>\n      <h1>I am a CUTSCENE!</h1>\n      <button style={{padding: '1rem', marginTop: '1rem'}}>Cool, Go Away</button>\n    </div>\n  )\n}\n\n\nconst Header = () => {\n  const [state, dispatch] = useContext(Context);\n  const history = useHistory();\n\n  function logout() {\n    axios.defaults.headers.common['Authorization'] = ``;\n    localStorage.removeItem('prplAppData');\n    dispatch({type: actions.LOGOUT});\n    history.push('/login');\n  }\n\n  useEffect(() => {\n    // Header's first load fires this off, which is when the app has just opened.\n    const initLoadAppData = load();\n    if (initLoadAppData !== null) {\n      dispatch({type: actions.LOAD_USER, payload: initLoadAppData});\n      axios.defaults.headers.common['Authorization'] = `Bearer ${initLoadAppData.token}`;\n      history.push('/home');\n    }\n    // NOTE: It may make a lot more sense just to pop this code into the index.js file instead. The framework for this method is commented out over there.\n  }, [dispatch, history]);\n\n  useEffect(() => {\n    if (state?.cutscene?.current) {\n      // A current cutscene has been mounted; play it out somehow\n      // OR! What if we have a 'hidden' component, high z-index and fixed positioned\n    }\n  }, [state.cutscene])\n\n  return (\n    <div className='flex-centered flex-col' id='app-header'>\n      <div>\n        <h1>Project : Playground</h1>\n      </div>\n      <div className='flex flex-row'>\n        {!state.token &&\n        <>\n          <button className='btn' onClick={() => history.push('/')}>What's This?</button>\n          <button className='btn' onClick={() => history.push('/login')}>Log In</button>\n          <button className='btn' onClick={() => history.push('/register')}>Register</button>\n        </>\n        }\n        {state.token &&\n        <>\n          <button className='btn' onClick={() => history.push('/home')}>Home</button>\n          <button className='btn' onClick={() => history.push('/body')}>Body</button>\n          <button className='btn' onClick={() => history.push('/user')}>User</button>\n          <button className='btn' onClick={logout}>Log Out</button>\n        </>\n        }\n      </div>\n    </div>\n  )\n}\n\n\nconst LandingPage = () => {\n  const [state, dispatch] = useContext(Context);\n  const history = useHistory();\n\n  useEffect(() => {\n    if (state.token) {\n      // Kinda wiggly way to do it, but turning '/' into '/home' for logged in users :P\n      history.push('/home');\n    }\n  }, []);\n\n  return (\n    <div>\n      <h1>Hey there, {state.playgroundname}.</h1>\n      <p>Let me tell you a bit about Project: Playground!</p>\n    </div>\n  )\n}\n\n\nconst UserPage = () => {\n  const [state, dispatch] = useContext(Context);\n  const [oldPassword, setOldPassword] = useState('');\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmNewPassword, setConfirmNewPassword] = useState('');\n\n  function submitPWChangeRequest() {\n    if (oldPassword && newPassword && confirmNewPassword && newPassword === confirmNewPassword) {\n      const PWRequest = {oldPW: oldPassword, newPW: newPassword};\n      axios.post('/user/change_pw', PWRequest)\n        .then(res => {\n          console.log(`Placeholder for successful PW change request`);\n        })\n        .catch(err => {\n          console.log(`Placeholder for PW change request error`);\n        })\n    } else {\n      alert(`Please make sure to enter your old PW, as well as a new password that matches itself in the confirmation field.`);\n    }\n  }\n\n  return (\n    <div style={{display: 'flex', width: '100%', alignItems: 'center', marginTop: '1rem', flexDirection: 'column'}}>\n      <h1>Welcome to USER PAGE.</h1>\n      <h3>This is where I'll tell you all about yourself! And maybe change your settings.</h3>\n      <h3>Come to think of it, \"Settings\" and \"User\" might end up being separate concerns. That's fine!</h3>\n      <h2>You can Change Password here:</h2>\n      <input type='password' placeholder={'Your old password'} value={oldPassword} onChange={e => setOldPassword(e.target.value)}></input>\n      <input type='password' placeholder={'Your new password'} value={newPassword} onChange={e => setNewPassword(e.target.value)}></input>\n      <input type='password' placeholder={'Confirm your new password'} value={confirmNewPassword} onChange={e => setConfirmNewPassword(e.target.value)}></input>\n      <button onClick={submitPWChangeRequest}>Change Password</button>\n    </div>\n  )\n}\n\n\nconst Home = () => {\n  const [state, dispatch] = useContext(Context);\n\n  // HERE: We should only be here if we're logged in, so let's slap a useEffect down.\n  /*\n    About the useEffect:\n    -- This is ideally where the user will land when they log in each new day. (Maybe have a lastInteractDate so the Header can check as the user does stuff?)\n    -- \n  */\n  useEffect(() => {\n    // Initial load effects\n  }, []);\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', width: '100%', marginTop: '1rem', alignItems: 'center', padding: '1rem'}}>\n      <h1>Welcome home, {state.playgroundname}!</h1>\n      <h2>We may now do things. Well, not yet. Soon, though!</h2>\n      <h3 style={{textAlign: 'center'}}>The idea for this page is to present an interactive \"core\" of the PrPl experience. This is also where the first tutorial will 'load.'</h3>\n      {state.encounters?.tabula_rasa === 0 && \n      <>\n        <h1>What a TREAT! Your adventure is beginning right now!</h1>\n        <button style={{padding: '0.8rem'}} onClick={() => dispatch({type: actions.MOUNT_CUTSCENE, payload: events.introduction})}>BEGIN</button>\n      </>\n      }\n    </div>\n  )\n}\n\n\nconst Body = () => {\n  const [state, dispatch] = useContext(Context);\n  const [activityName, setActivityName] = useState('');\n  const [activityAmt, setActivityAmt] = useState(0);\n  const [activityType, setActivityType] = useState('');\n  const mounted = useRef(false);\n\n  function addActivity() {\n    if (activityName && activityAmt > 0 && activityType) {\n      const newActivity = {name: activityName, amount: activityAmt, type: activityType};\n      const today = dateToString();\n      dispatch({type: actions.ADD_ACTIVITY, payload: {activity: newActivity, date: today}});\n      setActivityName('');\n      setActivityAmt(0);\n      setActivityType('');\n    }\n  }\n\n  useEffect(() => {\n    // Good enough for now to avoid an extra DB push on component mounting\n    if (!mounted.current) {\n      mounted.current = true;\n    } else {\n      console.log(`I feel the need to update the backend with new STUFF!`);\n      save(state);\n      updateDB(state);\n    }\n    \n  }, [state]);\n\n  return (\n    <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '1rem'}}>\n      <h1>Add an Activity</h1>\n      <div style={{marginTop: '1rem', display: 'flex', flexDirection: 'column', height: '300px', width: '300px', border: '1px solid #444', alignItems: 'center', padding: '1rem 0'}}>\n        <input type='text' style={{padding: '1rem', fontSize: '0.8rem', width: '200px'}} placeholder={'activity name'} value={activityName} onChange={e => setActivityName(e.target.value)}></input>\n        <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'space-between', width: '60%'}}>\n          <input type='number' placeholder={'amt'} style={{marginTop: '1rem', padding: '1rem', width: '80px'}} value={activityAmt} onChange={e => setActivityAmt(e.target.value)} ></input>\n          <input type='text' placeholder={'type'} style={{marginTop: '1rem', padding: '1rem', width: '80px'}} value={activityType} onChange={e => setActivityType(e.target.value)} ></input>\n        </div>\n        <Button onClick={addActivity} style={{marginTop: '1rem'}}>Add Activity</Button>\n      </div>\n    </div>\n  )\n}\n\n\nconst People = () => {\n  return (\n    <div>\n      <h1>Find People Here!</h1>\n    </div>\n  )\n}\n\nexport default App;\n","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/index.js",[],["50","51"],"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/context/context.js",[],"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/pages/Register.js",["52"],"import React, { useState, useContext } from \"react\";\nimport axios from 'axios';\nimport { Link, useHistory } from 'react-router-dom';\nimport { actions, Context } from '../context/context';\nimport { save } from '../functions/globalfxns';\nimport { Card, LogoBlock, Form, Input, HalfInput, Button } from '../components/AuthComponent';\n\nfunction Register() {\n  const [state, dispatch] = useContext(Context);\n  const [email, setEmail] = useState('');\n  const [pgName, setPgName] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmedPassword, setConfirmedPassword] = useState('');\n  const history = useHistory();\n\n  function registerNewUser() {\n    let errorFeedback = '';\n\n    // Add more checks, like empty spaces in any of it, and maybe length checks, and more robust email format checks\n    if (!email) errorFeedback += `Please enter an email to user as your login account. `;\n    if (email.indexOf('@') === -1 && errorFeedback.length === 0) errorFeedback += `Please enter an actual email address. `;\n    if (email.indexOf('.') === -1 && errorFeedback.length === 0) errorFeedback += `Please enter an actual email address. `;\n    if (!password.length) errorFeedback += `Enter a password to use. `;\n    if (!confirmedPassword.length && password.length) errorFeedback += `Please re-enter your password in the confirmation field. `;\n    if (password !== confirmedPassword && password.length && confirmedPassword.length) errorFeedback += `Your password doesn't match itself. Identity crisis? `;\n    if (!pgName) errorFeedback += `Please enter a name to use as your Playground username. `;\n\n    if (errorFeedback) alert(errorFeedback)\n    else {\n      // Creating a backend-friendly version of these variables to send in the request\n      const newUserCredentials = {\n        email: email,\n        password: password,\n        playgroundname: pgName\n      };\n  \n      // Add a catch for \"success\" where we save the user's STUFF, incl. token, to global state; maybe add a Header useEffect that puts token in auth header(s)\n      //    via axios default\n      // Oh, and boop onto the HOME page. You're home! See your STUFF!\n      axios.post('/user/register', newUserCredentials)\n        .then(res => {\n          console.log(`Server sez: ${res.data.message}!`);\n          let localUser = {...res.data.user};\n          console.log(`Registering went well, and our local user is now ${JSON.stringify(localUser)}`);\n          dispatch({type: actions.LOAD_USER, payload: localUser});\n          save(localUser);\n          axios.defaults.headers.common['Authorization'] = `Bearer ${localUser.token}`;\n          history.push('/home');\n        })\n        .catch(err => console.log(`Oopsie: ${err}`));\n      }\n    \n  }\n\n  return (\n    <Card>\n      <LogoBlock />\n      <Form>\n        <Input type=\"email\" autoFocus={true} placeholder=\"Please enter your email\" value={email} onChange={e => setEmail(e.target.value)} />\n        <div className='flex flex-row' style={{justifyContent: 'space-between'}}>\n          <HalfInput type=\"password\" placeholder=\"Enter a password\" value={password} onChange={e => setPassword(e.target.value)} />\n          <HalfInput type=\"password\" placeholder=\"Confirm password\" value={confirmedPassword} onChange={e => setConfirmedPassword(e.target.value)} />\n        </div>\n        <Input type=\"text\" placeholder=\"Please enter the username you'd like others to see\" value={pgName} onChange={e => setPgName(e.target.value)} />\n        <Button onClick={registerNewUser}>Register</Button>\n      </Form>\n      <Link to=\"/login\">Already have an account?</Link>\n    </Card>\n  );\n}\n\nexport default Register;","/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/components/AuthComponent.js",[],"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/PrivateRoute.js",["53"],"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/pages/Login.js",["54"],"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/functions/globalfxns.js",[],"/Users/ejdouglass/Desktop/code2020/folioprpl/webclient/src/events/events.js",[],{"ruleId":"55","severity":1,"message":"56","line":37,"column":17,"nodeType":"57","messageId":"58","endLine":37,"endColumn":25},{"ruleId":"55","severity":1,"message":"56","line":111,"column":17,"nodeType":"57","messageId":"58","endLine":111,"endColumn":25},{"ruleId":"59","severity":1,"message":"60","line":119,"column":6,"nodeType":"61","endLine":119,"endColumn":8,"suggestions":"62"},{"ruleId":"55","severity":1,"message":"63","line":131,"column":10,"nodeType":"57","messageId":"58","endLine":131,"endColumn":15},{"ruleId":"55","severity":1,"message":"56","line":131,"column":17,"nodeType":"57","messageId":"58","endLine":131,"endColumn":25},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"55","severity":1,"message":"63","line":9,"column":10,"nodeType":"57","messageId":"58","endLine":9,"endColumn":15},{"ruleId":"55","severity":1,"message":"68","line":1,"column":17,"nodeType":"57","messageId":"58","endLine":1,"endColumn":26},{"ruleId":"55","severity":1,"message":"63","line":9,"column":10,"nodeType":"57","messageId":"58","endLine":9,"endColumn":15},"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'state.token'. Either include them or remove the dependency array.","ArrayExpression",["69"],"'state' is assigned a value but never used.","no-native-reassign",["70"],"no-negated-in-lhs",["71"],"'Component' is defined but never used.",{"desc":"72","fix":"73"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [history, state.token]",{"range":"74","text":"75"},[4428,4430],"[history, state.token]"]